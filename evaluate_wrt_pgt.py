import argparse
from pathlib import Path

import pycolmap

from lamaria import logger
from lamaria.eval.pgt_evaluation import evaluate_wrt_pgt
from lamaria.structs.sparse_eval import SparseEvalResult
from lamaria.structs.trajectory import Trajectory


def run(
    estimate: Path,
    gt_estimate: Path,
    sparse_eval_result: Path,
    output_path: Path,
) -> bool:
    """Evaluate an estimated trajectory with respect to a pseudo
    ground-truth trajectory that observes control points.

    Args:
        estimate (Path): Path to the pose estimate file.
        gt_estimate (Path): Path to the pGT pose estimate file.
        sparse_eval_result (Path): Path to the .npy file containing
            SparseEvalResult data. This file is generated by
            `evaluate_wrt_control_points`, and is needed to
            transform the estimated trajectory to the pGT.
        output_path (Path): Path to save the evaluation results.
    Returns:
        bool: True if the evaluation was successful, False otherwise.
    """

    est_traj = Trajectory.load_from_file(estimate, invert_poses=False)
    if not est_traj.is_loaded():
        logger.error("Estimate could not be loaded")
        return False

    gt_traj = Trajectory.load_from_file(gt_estimate, invert_poses=False)
    if not gt_traj.is_loaded():
        logger.error("pGT Estimate could not be loaded")
        return False

    result = SparseEvalResult.load_from_npy(sparse_eval_result)
    if result is None:
        logger.error("SparseEvalResult could not be loaded")
        return False

    sim3d = sparse_eval_result.alignment.optimized_sim3d
    if not isinstance(sim3d, pycolmap.Sim3d):
        logger.error("No valid Sim3d found in SparseEvalResult")
        return False

    error_file = evaluate_wrt_pgt(est_traj, gt_traj, sim3d, output_path)
    if not error_file.exists():
        logger.error("pGT evaluation failed.")
        return False

    # TODO: Add metic calc here?


if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        description="Evaluate an estimated trajectory with respect to pGT."
        " Requires a SparseEvalResult .npy file."
    )
    parser.add_argument(
        "--estimate",
        type=Path,
        required=True,
        help="Path to the pose estimate file.",
    )
    parser.add_argument(
        "--gt_estimate",
        type=Path,
        required=True,
        help="Path to the pGT pose estimate file.",
    )
    parser.add_argument(
        "--sparse_eval_result",
        type=Path,
        required=True,
        help="Path to the .npy file containing SparseEvalResult data."
        "Result of `evaluate_wrt_control_points`.",
    )
    parser.add_argument(
        "--output_path",
        type=Path,
        required=True,
        help="Path to save the evaluation results.",
    )
    args = parser.parse_args()
    _ = run(
        args.estimate,
        args.gt_estimate,
        args.sparse_eval_result,
        args.output_path,
    )
